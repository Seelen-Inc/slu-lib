{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Placeholder",
  "type": "object",
  "properties": {
    "center": {
      "description": "Items to be displayed in the toolbar",
      "default": [],
      "type": "array",
      "items": {
        "$ref": "#/definitions/ToolbarItem2"
      }
    },
    "isReorderDisabled": {
      "description": "Whether the reordering possible on the toolbar",
      "default": false,
      "type": "boolean"
    },
    "left": {
      "description": "Items to be displayed in the toolbar",
      "default": [],
      "type": "array",
      "items": {
        "$ref": "#/definitions/ToolbarItem2"
      }
    },
    "right": {
      "description": "Items to be displayed in the toolbar",
      "default": [],
      "type": "array",
      "items": {
        "$ref": "#/definitions/ToolbarItem2"
      }
    }
  },
  "definitions": {
    "PluginId": {
      "$ref": "#/definitions/ResourceId"
    },
    "ResourceId": {
      "description": "visual id composed of the creator username and the resource name",
      "type": "string"
    },
    "StyleValue": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "number"
        }
      ]
    },
    "ToolbarItem": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "badge": {
              "description": "Badge will be displayed over the item, useful as notifications.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Base Item Scope Have all icons defined on [React Icons](https://react-icons.github.io/react-icons) as properties of the object. ```js const icon: object; ``` Haves all environment variables defined on the system as properties of the object. ```js const env: object; ``` Functions to add images to the item. ```js function getIcon(name: string, size: number = 16): string function imgFromUrl (url: string, size: number = 16): string function imgFromPath (path: string, size: number = 16): string function imgFromExe (exe_path: string, size: number = 16): string function t(path: string): string ```",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "id": {
              "description": "Id to identify the item, should be unique.",
              "default": "",
              "type": "string"
            },
            "onClick": {
              "description": "Deprecated use `onClickV2` instead.",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "onClickV2": {
              "description": "This code will be parsed and executed when the item is clicked.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Base Item Scope Have all icons defined on [React Icons](https://react-icons.github.io/react-icons) as properties of the object. ```js const icon: object; ``` Haves all environment variables defined on the system as properties of the object. ```js const env: object; ``` Functions to add images to the item. ```js function getIcon(name: string, size: number = 16): string function imgFromUrl (url: string, size: number = 16): string function imgFromPath (path: string, size: number = 16): string function imgFromExe (exe_path: string, size: number = 16): string function t(path: string): string ```",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "style": {
              "description": "Styles to be added to the item. This follow the same interface of React's `style` prop.",
              "default": {},
              "type": "object",
              "additionalProperties": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/StyleValue"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "template": {
              "description": "Content to display in the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Base Item Scope Have all icons defined on [React Icons](https://react-icons.github.io/react-icons) as properties of the object. ```js const icon: object; ``` Haves all environment variables defined on the system as properties of the object. ```js const env: object; ``` Functions to add images to the item. ```js function getIcon(name: string, size: number = 16): string function imgFromUrl (url: string, size: number = 16): string function imgFromPath (path: string, size: number = 16): string function imgFromExe (exe_path: string, size: number = 16): string function t(path: string): string ```",
              "default": "",
              "type": "string"
            },
            "tooltip": {
              "description": "Content to display in tooltip of the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Base Item Scope Have all icons defined on [React Icons](https://react-icons.github.io/react-icons) as properties of the object. ```js const icon: object; ``` Haves all environment variables defined on the system as properties of the object. ```js const env: object; ``` Functions to add images to the item. ```js function getIcon(name: string, size: number = 16): string function imgFromUrl (url: string, size: number = 16): string function imgFromPath (path: string, size: number = 16): string function imgFromExe (exe_path: string, size: number = 16): string function t(path: string): string ```",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "type": {
              "type": "string",
              "enum": [
                "text"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "badge": {
              "description": "Badge will be displayed over the item, useful as notifications.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Generic Item Scope ```ts // the current focused window const window: { name: string; title: string; exe: string | null; }; ```",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "id": {
              "description": "Id to identify the item, should be unique.",
              "default": "",
              "type": "string"
            },
            "onClick": {
              "description": "Deprecated use `onClickV2` instead.",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "onClickV2": {
              "description": "This code will be parsed and executed when the item is clicked.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Generic Item Scope ```ts // the current focused window const window: { name: string; title: string; exe: string | null; }; ```",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "style": {
              "description": "Styles to be added to the item. This follow the same interface of React's `style` prop.",
              "default": {},
              "type": "object",
              "additionalProperties": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/StyleValue"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "template": {
              "description": "Content to display in the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Generic Item Scope ```ts // the current focused window const window: { name: string; title: string; exe: string | null; }; ```",
              "default": "",
              "type": "string"
            },
            "tooltip": {
              "description": "Content to display in tooltip of the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Generic Item Scope ```ts // the current focused window const window: { name: string; title: string; exe: string | null; }; ```",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "type": {
              "type": "string",
              "enum": [
                "generic"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "badge": {
              "description": "Badge will be displayed over the item, useful as notifications.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Date Item Scope ```ts const date: string; // the formatted date ```",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "id": {
              "description": "Id to identify the item, should be unique.",
              "default": "",
              "type": "string"
            },
            "onClick": {
              "description": "Deprecated use `onClickV2` instead.",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "onClickV2": {
              "description": "This code will be parsed and executed when the item is clicked.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Date Item Scope ```ts const date: string; // the formatted date ```",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "style": {
              "description": "Styles to be added to the item. This follow the same interface of React's `style` prop.",
              "default": {},
              "type": "object",
              "additionalProperties": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/StyleValue"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "template": {
              "description": "Content to display in the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Date Item Scope ```ts const date: string; // the formatted date ```",
              "default": "",
              "type": "string"
            },
            "tooltip": {
              "description": "Content to display in tooltip of the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Date Item Scope ```ts const date: string; // the formatted date ```",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "type": {
              "type": "string",
              "enum": [
                "date"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "badge": {
              "description": "Badge will be displayed over the item, useful as notifications.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Power Item Scope ```ts interface PowerStatus { acLineStatus: number; batteryFlag: number; batteryLifePercent: number; systemStatusFlag: number; batteryLifeTime: number; batteryFullLifeTime: number; }\n\nenum PowerPlan { Balanced = 'Balanced', BatterySaver = 'BatterySaver', BetterBattery = 'BetterBattery', GameMode = 'GameMode', HighPerformance = 'HighPerformance', MaxPerformance = 'MaxPerformance', MixedReality = 'MixedReality', }\n\ninterface Battery { // Static info vendor: string | null; model: string | null; serialNumber: string | null; technology: string;\n\n// Common information state: string; capacity: number; temperature: number | null; percentage: number; cycleCount: number | null; smartCharging: boolean;\n\n// Energy stats energy: number; energyFull: number; energyFullDesign: number; energyRate: number; voltage: number;\n\n// Charge stats timeToFull: number | null; timeToEmpty: number | null; }\n\nconst power: PowerStatus; const powerPlan: PowerPlan; const batteries: Battery[]; const battery: Battery | null; ```",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "id": {
              "description": "Id to identify the item, should be unique.",
              "default": "",
              "type": "string"
            },
            "onClick": {
              "description": "Deprecated use `onClickV2` instead.",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "onClickV2": {
              "description": "This code will be parsed and executed when the item is clicked.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Power Item Scope ```ts interface PowerStatus { acLineStatus: number; batteryFlag: number; batteryLifePercent: number; systemStatusFlag: number; batteryLifeTime: number; batteryFullLifeTime: number; }\n\nenum PowerPlan { Balanced = 'Balanced', BatterySaver = 'BatterySaver', BetterBattery = 'BetterBattery', GameMode = 'GameMode', HighPerformance = 'HighPerformance', MaxPerformance = 'MaxPerformance', MixedReality = 'MixedReality', }\n\ninterface Battery { // Static info vendor: string | null; model: string | null; serialNumber: string | null; technology: string;\n\n// Common information state: string; capacity: number; temperature: number | null; percentage: number; cycleCount: number | null; smartCharging: boolean;\n\n// Energy stats energy: number; energyFull: number; energyFullDesign: number; energyRate: number; voltage: number;\n\n// Charge stats timeToFull: number | null; timeToEmpty: number | null; }\n\nconst power: PowerStatus; const powerPlan: PowerPlan; const batteries: Battery[]; const battery: Battery | null; ```",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "style": {
              "description": "Styles to be added to the item. This follow the same interface of React's `style` prop.",
              "default": {},
              "type": "object",
              "additionalProperties": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/StyleValue"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "template": {
              "description": "Content to display in the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Power Item Scope ```ts interface PowerStatus { acLineStatus: number; batteryFlag: number; batteryLifePercent: number; systemStatusFlag: number; batteryLifeTime: number; batteryFullLifeTime: number; }\n\nenum PowerPlan { Balanced = 'Balanced', BatterySaver = 'BatterySaver', BetterBattery = 'BetterBattery', GameMode = 'GameMode', HighPerformance = 'HighPerformance', MaxPerformance = 'MaxPerformance', MixedReality = 'MixedReality', }\n\ninterface Battery { // Static info vendor: string | null; model: string | null; serialNumber: string | null; technology: string;\n\n// Common information state: string; capacity: number; temperature: number | null; percentage: number; cycleCount: number | null; smartCharging: boolean;\n\n// Energy stats energy: number; energyFull: number; energyFullDesign: number; energyRate: number; voltage: number;\n\n// Charge stats timeToFull: number | null; timeToEmpty: number | null; }\n\nconst power: PowerStatus; const powerPlan: PowerPlan; const batteries: Battery[]; const battery: Battery | null; ```",
              "default": "",
              "type": "string"
            },
            "tooltip": {
              "description": "Content to display in tooltip of the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Power Item Scope ```ts interface PowerStatus { acLineStatus: number; batteryFlag: number; batteryLifePercent: number; systemStatusFlag: number; batteryLifeTime: number; batteryFullLifeTime: number; }\n\nenum PowerPlan { Balanced = 'Balanced', BatterySaver = 'BatterySaver', BetterBattery = 'BetterBattery', GameMode = 'GameMode', HighPerformance = 'HighPerformance', MaxPerformance = 'MaxPerformance', MixedReality = 'MixedReality', }\n\ninterface Battery { // Static info vendor: string | null; model: string | null; serialNumber: string | null; technology: string;\n\n// Common information state: string; capacity: number; temperature: number | null; percentage: number; cycleCount: number | null; smartCharging: boolean;\n\n// Energy stats energy: number; energyFull: number; energyFullDesign: number; energyRate: number; voltage: number;\n\n// Charge stats timeToFull: number | null; timeToEmpty: number | null; }\n\nconst power: PowerStatus; const powerPlan: PowerPlan; const batteries: Battery[]; const battery: Battery | null; ```",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "type": {
              "type": "string",
              "enum": [
                "power"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "badge": {
              "description": "Badge will be displayed over the item, useful as notifications.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Network Item Scope ```ts interface NetworkInterface { name: string; description: string; status: 'up' | 'down'; dnsSuffix: string; type: string; gateway: string | null; mac: string; ipv4: string | null; ipv6: string | null; } const online: boolean; const interfaces: NetworkInterface[]; const usingInterface: NetworkInterface | null; ```",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "id": {
              "description": "Id to identify the item, should be unique.",
              "default": "",
              "type": "string"
            },
            "onClick": {
              "description": "Deprecated use `onClickV2` instead.",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "onClickV2": {
              "description": "This code will be parsed and executed when the item is clicked.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Network Item Scope ```ts interface NetworkInterface { name: string; description: string; status: 'up' | 'down'; dnsSuffix: string; type: string; gateway: string | null; mac: string; ipv4: string | null; ipv6: string | null; } const online: boolean; const interfaces: NetworkInterface[]; const usingInterface: NetworkInterface | null; ```",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "style": {
              "description": "Styles to be added to the item. This follow the same interface of React's `style` prop.",
              "default": {},
              "type": "object",
              "additionalProperties": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/StyleValue"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "template": {
              "description": "Content to display in the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Network Item Scope ```ts interface NetworkInterface { name: string; description: string; status: 'up' | 'down'; dnsSuffix: string; type: string; gateway: string | null; mac: string; ipv4: string | null; ipv6: string | null; } const online: boolean; const interfaces: NetworkInterface[]; const usingInterface: NetworkInterface | null; ```",
              "default": "",
              "type": "string"
            },
            "tooltip": {
              "description": "Content to display in tooltip of the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Network Item Scope ```ts interface NetworkInterface { name: string; description: string; status: 'up' | 'down'; dnsSuffix: string; type: string; gateway: string | null; mac: string; ipv4: string | null; ipv6: string | null; } const online: boolean; const interfaces: NetworkInterface[]; const usingInterface: NetworkInterface | null; ```",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "type": {
              "type": "string",
              "enum": [
                "network"
              ]
            },
            "withWlanSelector": {
              "description": "Show Wi-fi selector popup on click]",
              "default": false,
              "type": "boolean"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "badge": {
              "description": "Badge will be displayed over the item, useful as notifications.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Media Item Scope ```ts const volume: number; // output master volume from 0 to 1 const isMuted: boolean; // output master volume is muted const inputVolume: number; // input master volume from 0 to 1 const inputIsMuted: boolean; // input master volume is muted\n\ninterface MediaSession { id: string; title: string; author: string; thumbnail: string | null; // path to temporal media session image playing: boolean; default: boolean; owner: { name: string; iconPath: string | null; } | null; }\n\nconst mediaSession: MediaSession | null; ```",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "id": {
              "description": "Id to identify the item, should be unique.",
              "default": "",
              "type": "string"
            },
            "onClick": {
              "description": "Deprecated use `onClickV2` instead.",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "onClickV2": {
              "description": "This code will be parsed and executed when the item is clicked.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Media Item Scope ```ts const volume: number; // output master volume from 0 to 1 const isMuted: boolean; // output master volume is muted const inputVolume: number; // input master volume from 0 to 1 const inputIsMuted: boolean; // input master volume is muted\n\ninterface MediaSession { id: string; title: string; author: string; thumbnail: string | null; // path to temporal media session image playing: boolean; default: boolean; owner: { name: string; iconPath: string | null; } | null; }\n\nconst mediaSession: MediaSession | null; ```",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "style": {
              "description": "Styles to be added to the item. This follow the same interface of React's `style` prop.",
              "default": {},
              "type": "object",
              "additionalProperties": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/StyleValue"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "template": {
              "description": "Content to display in the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Media Item Scope ```ts const volume: number; // output master volume from 0 to 1 const isMuted: boolean; // output master volume is muted const inputVolume: number; // input master volume from 0 to 1 const inputIsMuted: boolean; // input master volume is muted\n\ninterface MediaSession { id: string; title: string; author: string; thumbnail: string | null; // path to temporal media session image playing: boolean; default: boolean; owner: { name: string; iconPath: string | null; } | null; }\n\nconst mediaSession: MediaSession | null; ```",
              "default": "",
              "type": "string"
            },
            "tooltip": {
              "description": "Content to display in tooltip of the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Media Item Scope ```ts const volume: number; // output master volume from 0 to 1 const isMuted: boolean; // output master volume is muted const inputVolume: number; // input master volume from 0 to 1 const inputIsMuted: boolean; // input master volume is muted\n\ninterface MediaSession { id: string; title: string; author: string; thumbnail: string | null; // path to temporal media session image playing: boolean; default: boolean; owner: { name: string; iconPath: string | null; } | null; }\n\nconst mediaSession: MediaSession | null; ```",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "type": {
              "type": "string",
              "enum": [
                "media"
              ]
            },
            "withMediaControls": {
              "description": "Show media controls popup on click",
              "default": false,
              "type": "boolean"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "badge": {
              "description": "Badge will be displayed over the item, useful as notifications.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Notifications Item Scope ```ts const count: number; ```",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "id": {
              "description": "Id to identify the item, should be unique.",
              "default": "",
              "type": "string"
            },
            "onClick": {
              "description": "Deprecated use `onClickV2` instead.",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "onClickV2": {
              "description": "This code will be parsed and executed when the item is clicked.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Notifications Item Scope ```ts const count: number; ```",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "style": {
              "description": "Styles to be added to the item. This follow the same interface of React's `style` prop.",
              "default": {},
              "type": "object",
              "additionalProperties": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/StyleValue"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "template": {
              "description": "Content to display in the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Notifications Item Scope ```ts const count: number; ```",
              "default": "",
              "type": "string"
            },
            "tooltip": {
              "description": "Content to display in tooltip of the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Notifications Item Scope ```ts const count: number; ```",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "type": {
              "type": "string",
              "enum": [
                "user"
              ]
            },
            "withUserFolder": {
              "description": "Show user control popup on click",
              "default": false,
              "type": "boolean"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "badge": {
              "description": "Badge will be displayed over the item, useful as notifications.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Notifications Item Scope ```ts const count: number; ```",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "id": {
              "description": "Id to identify the item, should be unique.",
              "default": "",
              "type": "string"
            },
            "onClick": {
              "description": "Deprecated use `onClickV2` instead.",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "onClickV2": {
              "description": "This code will be parsed and executed when the item is clicked.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Notifications Item Scope ```ts const count: number; ```",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "style": {
              "description": "Styles to be added to the item. This follow the same interface of React's `style` prop.",
              "default": {},
              "type": "object",
              "additionalProperties": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/StyleValue"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "template": {
              "description": "Content to display in the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Notifications Item Scope ```ts const count: number; ```",
              "default": "",
              "type": "string"
            },
            "tooltip": {
              "description": "Content to display in tooltip of the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Notifications Item Scope ```ts const count: number; ```",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "type": {
              "type": "string",
              "enum": [
                "notifications"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "badge": {
              "description": "Badge will be displayed over the item, useful as notifications.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Workspace Item Scope this module does no expand the scope of the item",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "id": {
              "description": "Id to identify the item, should be unique.",
              "default": "",
              "type": "string"
            },
            "onClick": {
              "description": "Deprecated use `onClickV2` instead.",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "onClickV2": {
              "description": "This code will be parsed and executed when the item is clicked.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Workspace Item Scope this module does no expand the scope of the item",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "style": {
              "description": "Styles to be added to the item. This follow the same interface of React's `style` prop.",
              "default": {},
              "type": "object",
              "additionalProperties": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/StyleValue"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "template": {
              "description": "Content to display in the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Workspace Item Scope this module does no expand the scope of the item",
              "default": "",
              "type": "string"
            },
            "tooltip": {
              "description": "Content to display in tooltip of the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Workspace Item Scope this module does no expand the scope of the item",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "type": {
              "type": "string",
              "enum": [
                "tray"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "badge": {
              "description": "Badge will be displayed over the item, useful as notifications.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Device Item Scope this module does no expand the scope of the item",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "id": {
              "description": "Id to identify the item, should be unique.",
              "default": "",
              "type": "string"
            },
            "onClick": {
              "description": "Deprecated use `onClickV2` instead.",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "onClickV2": {
              "description": "This code will be parsed and executed when the item is clicked.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Device Item Scope this module does no expand the scope of the item",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "style": {
              "description": "Styles to be added to the item. This follow the same interface of React's `style` prop.",
              "default": {},
              "type": "object",
              "additionalProperties": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/StyleValue"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "template": {
              "description": "Content to display in the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Device Item Scope this module does no expand the scope of the item",
              "default": "",
              "type": "string"
            },
            "tooltip": {
              "description": "Content to display in tooltip of the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Device Item Scope this module does no expand the scope of the item",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "type": {
              "type": "string",
              "enum": [
                "device"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "badge": {
              "description": "Badge will be displayed over the item, useful as notifications.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Settings Item Scope this module does no expand the scope of the item",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "id": {
              "description": "Id to identify the item, should be unique.",
              "default": "",
              "type": "string"
            },
            "onClick": {
              "description": "Deprecated use `onClickV2` instead.",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "onClickV2": {
              "description": "This code will be parsed and executed when the item is clicked.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Settings Item Scope this module does no expand the scope of the item",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "style": {
              "description": "Styles to be added to the item. This follow the same interface of React's `style` prop.",
              "default": {},
              "type": "object",
              "additionalProperties": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/StyleValue"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "template": {
              "description": "Content to display in the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Settings Item Scope this module does no expand the scope of the item",
              "default": "",
              "type": "string"
            },
            "tooltip": {
              "description": "Content to display in tooltip of the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Settings Item Scope this module does no expand the scope of the item",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "type": {
              "type": "string",
              "enum": [
                "settings"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "badge": {
              "description": "Badge will be displayed over the item, useful as notifications.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Workspace Item Scope this module does no expand the scope of the item",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "id": {
              "description": "Id to identify the item, should be unique.",
              "default": "",
              "type": "string"
            },
            "mode": {
              "default": "dotted",
              "allOf": [
                {
                  "$ref": "#/definitions/WorkspaceToolbarItemMode"
                }
              ]
            },
            "onClick": {
              "description": "Deprecated use `onClickV2` instead.",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "onClickV2": {
              "description": "This code will be parsed and executed when the item is clicked.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Workspace Item Scope this module does no expand the scope of the item",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "style": {
              "description": "Styles to be added to the item. This follow the same interface of React's `style` prop.",
              "default": {},
              "type": "object",
              "additionalProperties": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/StyleValue"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "template": {
              "description": "Content to display in the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Workspace Item Scope this module does no expand the scope of the item",
              "default": "",
              "type": "string"
            },
            "tooltip": {
              "description": "Content to display in tooltip of the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Workspace Item Scope this module does no expand the scope of the item",
              "default": null,
              "type": [
                "string",
                "null"
              ]
            },
            "type": {
              "type": "string",
              "enum": [
                "workspaces"
              ]
            }
          }
        }
      ]
    },
    "ToolbarItem2": {
      "anyOf": [
        {
          "$ref": "#/definitions/PluginId"
        },
        {
          "$ref": "#/definitions/ToolbarItem"
        }
      ]
    },
    "WorkspaceToolbarItemMode": {
      "type": "string",
      "enum": [
        "dotted",
        "named",
        "numbered"
      ]
    }
  }
}
